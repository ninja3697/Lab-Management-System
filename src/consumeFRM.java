
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class consumeFRM extends javax.swing.JFrame {

    /**
     * Creates new form consumeFRM
     */
    public consumeFRM() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        labTbl = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labTbl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        labTbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        labTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Price", "Lifetime", "Qty. Present", "Depreciation", "Current Price", "Date of Purchase"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        labTbl.setEnabled(false);
        jScrollPane1.setViewportView(labTbl);

        jButton3.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        jButton3.setText("<html>Consumable<br> Items");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        jButton4.setText("<html>Non Consumable<br>Items");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        jButton5.setText("<html>Back to<br> Main Menu");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 0));

        jLabel1.setBackground(new java.awt.Color(255, 255, 51));
        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("List of Consumable and Non-consumable Items");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 628, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(195, 195, 195)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
DefaultTableModel model=(DefaultTableModel) labTbl.getModel();
int rows=model.getRowCount();
if(rows>0){
for(int i=0;i<rows;i++){
model.removeRow(0);
}
}
try{
                Class.forName("com.mysql.jdbc.Driver");
                System.out.print("\nConnecting to database...");
Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/kashyap", "root", "kvalwar");
System.out.println(" SUCCESS!\n");
Statement stmt = con.createStatement();
String query = "SELECT * FROM lab WHERE life='consumable';";
ResultSet rs = stmt.executeQuery(query);
while(rs.next()) {
String price = rs.getString(3);
String  qty= rs.getString(5);
String dep = rs.getString(6);
    String life = rs.getString(4);
String  date = rs.getString(7);
DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
Date date1 = dateFormat.parse(date);
Date date2 = new Date();
Calendar c1=Calendar.getInstance();
c1.setTime(date1);
Calendar c2=Calendar.getInstance();
c2.setTime(date2);
double diff=c2.get(Calendar.DATE)-c1.get(Calendar.DATE)+(c2.get(Calendar.MONTH)-c1.get(Calendar.MONTH))*30+(c2.get(Calendar.YEAR)-c1.get(Calendar.YEAR))*365;
int year = (int)diff/365;
int i=1 ;
double price1=Double.parseDouble(price);
double pr=price1;
while(i<=year)
{
    pr=pr*0.95;
    ++i;
}
double cc=price1-pr;
double th=price1*0.05;
String depreciation="";
String curprice="";
if(life.equalsIgnoreCase("consumable")){
depreciation=(0+"");
curprice=(price1+"");
}
else if(pr>=th){
depreciation=(cc+"");
curprice=(pr+"");
}
else if(pr<th){
depreciation=((price1*0.95)+"");
curprice=((price1*0.05)+"");
}
model.addRow( new Object[ ]{rs.getString(2), rs.getInt(3), rs.getString(4), rs.getInt(5),depreciation, curprice,rs.getDate(7) });
}
String querystr=" SELECT SUM(Price) FROM lab;";
rs=stmt.executeQuery(querystr);
while (rs.next()){
int totprice=rs.getInt("SUM(Price)");
int rc=model.getRowCount();
double depri=0;
double cprice=0;
int i;
for(i=0;i<rc;i++){
String val=(String) model.getValueAt(i,4);
String pri=(String) model.getValueAt(i,5);
double pic=Double.parseDouble(val);
double pia=Double.parseDouble(pri);
depri=depri+pic;
cprice=cprice+pia;
}
}
rs.close();
stmt.close();
con.close();
}
catch(Exception e){
JOptionPane.showMessageDialog(null,"Error in Connectivity");
}
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
DefaultTableModel model=(DefaultTableModel) labTbl.getModel();
int rows=model.getRowCount();
if(rows>0){
for(int i=0;i<rows;i++){
model.removeRow(0);
}
}
try{
                Class.forName("com.mysql.jdbc.Driver");
                System.out.print("\nConnecting to database...");
Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/kashyap", "root", "kvalwar");
System.out.println(" SUCCESS!\n");
Statement stmt = con.createStatement();
String query = "SELECT * FROM lab WHERE life!='consumable';";
ResultSet rs = stmt.executeQuery(query);
while(rs.next()) {
String price = rs.getString(3);
String  qty= rs.getString(5);
String dep = rs.getString(6);
    String life = rs.getString(4);
String  date = rs.getString(7);
DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
Date date1 = dateFormat.parse(date);
Date date2 = new Date();
Calendar c1=Calendar.getInstance();
c1.setTime(date1);
Calendar c2=Calendar.getInstance();
c2.setTime(date2);
double diff=c2.get(Calendar.DATE)-c1.get(Calendar.DATE)+(c2.get(Calendar.MONTH)-c1.get(Calendar.MONTH))*30+(c2.get(Calendar.YEAR)-c1.get(Calendar.YEAR))*365;
int year = (int)diff/365;
int i=1 ;
double price1=Double.parseDouble(price);
double pr=price1;
while(i<=year)
{
    pr=pr*0.95;
    ++i;
}
double cc=price1-pr;
double th=price1*0.05;
String depreciation="";
String curprice="";
if(life.equalsIgnoreCase("consumable")){
depreciation=(0+"");
curprice=(price1+"");
}
else if(pr>=th){
depreciation=(cc+"");
curprice=(pr+"");
}
else if(pr<th){
depreciation=((price1*0.95)+"");
curprice=((price1*0.05)+"");
}
model.addRow( new Object[ ]{rs.getString(2), rs.getInt(3), rs.getString(4), rs.getInt(5),depreciation, curprice,rs.getDate(7) });
}
String querystr=" SELECT SUM(Price) FROM lab;";
rs=stmt.executeQuery(querystr);
while (rs.next()){
int totprice=rs.getInt("SUM(Price)");
int rc=model.getRowCount();
double depri=0;
double cprice=0;
int i;
for(i=0;i<rc;i++){
String val=(String) model.getValueAt(i,4);
String pri=(String) model.getValueAt(i,5);
double pic=Double.parseDouble(val);
double pia=Double.parseDouble(pri);
depri=depri+pic;
cprice=cprice+pia;
}
}
rs.close();
stmt.close();
con.close();
}
catch(Exception e){
JOptionPane.showMessageDialog(null,"Error in Connectivity");
}        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
 myFrame2 frame2=new myFrame2();
        consumeFRM.this.setVisible(false);
        frame2.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(consumeFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(consumeFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(consumeFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(consumeFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new consumeFRM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable labTbl;
    // End of variables declaration//GEN-END:variables
}
